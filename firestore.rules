
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can only read/write their own profile, Admins can read/write any.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }
    
    // Allow admins to list users for the admin panel
    match /users/{document=**} {
       allow list: if isAdmin();
    }

    // Authenticated users can read public collections
    match /scanners/{scannerId} {
      allow read: if request.auth != null;
    }

    match /feature_flags/{flagId} {
      allow read: if request.auth != null;
    }
    
    match /news_feed/{newsId} {
        allow read: if request.auth != null;
    }

    // Watchlist items can only be managed by their owner
    match /watchlist/{itemId} {
      allow read, create, delete: if request.auth.uid == request.resource.data.userId;
      allow list: if request.auth.uid == request.query.where.userId;
    }
    
    // Alerts can only be managed by their owner
    match /alerts/{alertId} {
        allow create: if request.auth.uid == request.resource.data.userId;
    }

    // Journal entries can only be managed by their owner
    match /trade_journal/{entryId} {
       allow read, create, update, delete: if request.auth.uid == request.resource.data.userId;
    }

    // Admin-only collections
    match /prompts/{promptId} {
      allow read, write: if isAdmin();
    }

    match /data_sources/{sourceId} {
      allow read, write: if isAdmin();
    }
    
    match /news_sources/{sourceId} {
        allow read, write: if isAdmin();
    }

    match /logs/{logId} {
      allow read: if isAdmin();
    }
    
    // Deny writes to logs from client
    match /logs/{logId} {
        allow write: if false;
    }

    // Allow test writes
    match /test_writes/{docId} {
      allow create: if true;
    }
  }
}

    